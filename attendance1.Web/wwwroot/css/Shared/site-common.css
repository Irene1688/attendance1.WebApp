/*=============*/
/* Login Page */
/*===========*/
/* Hide the default radio button */
.custom-radio {
    position: relative;
    display: inline-block;
    margin-right: 10px;
}

    .custom-radio input[type="radio"] {
        opacity: 0;
        position: absolute;
        left: 0;
    }

        /* Create a custom radio button */
        .custom-radio input[type="radio"] + label {
            position: relative;
            padding-left: 25px;
            cursor: pointer;
            line-height: 20px;
            display: inline-block;
            color: #797979;
            font-family: 'Varela Round', sans-serif;
            font-weight: normal;
        }

            /* The custom radio button */
            .custom-radio input[type="radio"] + label::before {
                content: "";
                position: absolute;
                left: 0;
                top: 50%;
                transform: translateY(-50%);
                width: 16px;
                height: 16px;
                border: 2px solid #a2a2a2;
                border-radius: 50%;
                background: #fff;
            }

        /* The checked state */
        .custom-radio input[type="radio"]:checked + label::before {
            background: #6b5fb5;
            border-color: #6b5fb5;
        }

        /* The dot inside the custom radio button */
        .custom-radio input[type="radio"]:checked + label::after {
            content: "";
            position: absolute;
            left: 5px;
            top: 50%;
            transform: translateY(-50%);
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background: #fff;
        }

/*=============*/
/* Error Page */
/*===========*/
@import url('https://fonts.googleapis.com/css?family=Open+Sans|Nova+Mono');

:root {
    --font-header: 'Nova Mono', monospace;
    --font-text: 'Open Sans', sans-serif;
    --color-theme: #F1EEDB;
    --color-bg: #282B24;
    --animation-sentence: 'You know you\'re supposed to leave, right?';
    --animation-duration: 40s;
}

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

.ghost {
    /* border: 1px solid tomato; */
    position: absolute;
    bottom: 5px;
    left: calc(50% - 100px);
    width: 200px;
    height: 200px;
    /* have the ghost move to the right and to the left of the screen, turning to its central position and repeating the animation twice */
    animation: hoverGhost calc(var(--animation-duration)/2) ease-in-out 15;
}
    /* introduce text through a pseudo element, connected to the animated div */
    .ghost:before {
        content: var(--animation-sentence);
        color: var(--color-theme);
        border-radius: 50%;
        position: absolute;
        bottom: 100%;
        text-align: center;
        line-height: 2;
        padding: 1rem;
        visibility: hidden;
        opacity: 0;
        /* have each string of text introduced as the ghost returns from the right edge of the screen, and for the length of time it takes to cover the central portion (a fourth, which becomes an eight as the animation length is half the total duration) */
        /* the delay for an hypothetical duration of 40s is 7.5s for the first, 27.5s for the second and finally 40s for the last
  in fractions and with a bit of math it boils down to 3/16, 27/40 and 1
  // ! remember to include a slight delay in the animation of the key and keyhole
  */
        animation: showText calc(var(--animation-duration)/8) calc(var(--animation-duration)*3/16) ease-out forwards, showNewText calc(var(--animation-duration)/8) calc(var(--animation-duration)*27/40) ease-out forwards, showFinalText calc(var(--animation-duration)/8) var(--animation-duration) ease-out forwards;
    }

/* define the keyframe animations
- hoverghost to have the ghost move right, left and then back to its default position
- showKey to introduce into view the key (and keyhole) svg
- showText, showNewText, showFinalText to show the different strings (the implementation is quite quirky and primed for optimization)
 */
@keyframes hoverGhost {
    25% {
        transform: translateX(20vw);
    }

    75% {
        transform: translateX(-20vw);
    }
}

/* alter the text changing the value of the custom property, weary of changing its value when the pseudo element is hidden and changing its value in the last keyframe (as the animation gives this value as per the "forwards" value of the fill-mode property)  */
@keyframes showText {
    2% {
        opacity: 1;
        visibility: visible;
    }

    98% {
        opacity: 1;
        visibility: visible;
    }

    99% {
        --animation-sentence: 'You know you\'re supposed to leave, right?';
        opacity: 0;
        visibility: hidden;
    }

    100% {
        --animation-sentence: 'You know you\'re supposed to leave, right?';
    }
}